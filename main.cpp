#include <string>
#include <iostream>

#include "cxxopts.hpp"

#include "Config.h"

int launch(int argc, char** argv)
{
    cxxopts::Options options("cornerstone2", "proto to ue++ converter");
    options.add_options()
            ("src_path", "A path, where *.proto source files resides.", cxxopts::value<std::string>())
            ("dst_path", "A path, where generated C++ classes should be placed.", cxxopts::value<std::string>())
            ("module_name", "(Optional) Name of the module (Needed to compute API, like MYMODULE_API)", cxxopts::value<std::string>())
            ("wrappers_path", "Name of the folder, where files generated by protoc should reside.", cxxopts::value<std::string>())
            ("company_name", "Company name will be used to declare category, where RPC methods will reside.",cxxopts::value<std::string>())
            ("precompiled_header", "(Optional) Provide a valid relative or absolute path to the precompiled header.", cxxopts::value<std::string>());

    cxxopts::ParseResult cliOpts = options.parse(argc, argv);

    if (!cliOpts.count("src_path") ||
        !cliOpts.count("dst_path") ||
        !cliOpts.count("company_name") ||
        !cliOpts.count("wrappers_path"))
    {
        std::cout << options.help() << std::endl;
        return 1;
    }

    const std::string srcPath = cliOpts["src_path"].as<std::string>();
    const std::string dstPath = cliOpts["dst_path"].as<std::string>();
    const std::string moduleName = cliOpts.count("module_name") ? cliOpts["module_name"].as<std::string>() : "";
    const std::string precompiledHeader = cliOpts.count("precompiled_header") ? cliOpts["precompiled_header"].as<std::string>() : "";
    const std::string wrappersPath = cliOpts["wrappers_path"].as<std::string>();
    const std::string companyName = cliOpts["company_name"].as<std::string>();

    Config config(srcPath, dstPath, moduleName, precompiledHeader, wrappersPath, companyName);
    config.validate();

    return 0;
}


int main(int argc, char** argv)
{
    return launch(argc, argv);
}
